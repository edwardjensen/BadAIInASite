name: Release Container

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/badaiinasite

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required for creating releases and reading git history
      packages: write      # Required for pushing to container registry
      id-token: write      # Required for OIDC
      attestations: write  # Required for build attestations

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

    - name: Get previous tag for changelog
      id: previous-tag
      run: |
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -n 1)
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, use initial commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog between tags
        if [ "${{ steps.previous-tag.outputs.previous-tag }}" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${{ steps.previous-tag.outputs.previous-tag }}..${{ github.ref_name }} --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create structured changelog
        cat > changelog.md << 'EOF'
        ## What's Changed
        
        $CHANGELOG
        
        ## Docker Container
        
        Pull the container image:
        ```bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        ```
        
        **Registry:** [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/badaiinasite)
        
        ## Installation
        
        ```bash
        # Pull and run the container
        docker run -d \
          --name badaiinasite \
          -p 8080:8080 \
          -e OPENROUTER_API_KEY="your-api-key" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        ```
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous-tag.outputs.previous-tag }}...${{ github.ref_name }}
        EOF
        
        # Output for GitHub
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      run: |
        # Determine if this is a prerelease
        if [[ "${{ steps.version.outputs.version }}" =~ (alpha|beta|rc|dev) ]]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        # Create release with generated changelog
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes-file changelog.md \
          $PRERELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release with Docker image info
      run: |
        # Add container size and other metadata as a comment
        MANIFEST=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }})
        SIZE=$(echo "$MANIFEST" | jq -r '.config.size // 0')
        
        # Convert bytes to MB
        SIZE_MB=$((SIZE / 1024 / 1024))
        
        echo "ðŸ“¦ **Container Details:**" >> release_update.md
        echo "- **Size:** ${SIZE_MB} MB" >> release_update.md
        echo "- **Platform:** linux/amd64" >> release_update.md
        echo "- **Registry:** GitHub Container Registry" >> release_update.md
        echo "" >> release_update.md
        echo "ðŸ”— **Quick Links:**" >> release_update.md
        echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/badaiinasite)" >> release_update.md
        echo "- [Documentation](https://github.com/${{ github.repository }}#readme)" >> release_update.md
        echo "- [Issues](https://github.com/${{ github.repository }}/issues)" >> release_update.md
        
        # Append to existing release notes
        CURRENT_NOTES=$(gh release view ${{ github.ref_name }} --json body -q .body)
        echo "$CURRENT_NOTES" > combined_notes.md
        echo "" >> combined_notes.md
        cat release_update.md >> combined_notes.md
        
        gh release edit ${{ github.ref_name }} --notes-file combined_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}