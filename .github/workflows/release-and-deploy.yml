# .github/workflows/release-and-deploy.yml
# Replaces release.yml - creates releases AND deploys to production
name: Release and Deploy

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/badaiinasite

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required for creating releases
      packages: write      # Required for pushing to container registry
      id-token: write      # Required for OIDC
      attestations: write  # Required for build attestations
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
        
        # Check if this is a prerelease
        if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Get previous tag for changelog
      id: previous-tag
      run: |
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${{ github.ref_name }}$" | head -n 1)
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog between tags
        if [ "${{ steps.previous-tag.outputs.previous-tag }}" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${{ steps.previous-tag.outputs.previous-tag }}..${{ github.ref_name }} --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Create structured changelog
        cat > changelog.md << 'EOF'
        ## What's Changed
        
        $CHANGELOG
        
        ## Docker Container
        
        Pull the container image:
        ```bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        ```
        
        **Registry:** [GitHub Container Registry](https://github.com/${{ github.repository }}/pkgs/container/badaiinasite)
        
        ## Installation
        
        ```bash
        # Pull and run the container
        docker run -d \
          --name badaiinasite \
          -p 8080:8080 \
          -e OPENROUTER_API_KEY="your-api-key" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        ```
        
        ## Full Changelog
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous-tag.outputs.previous-tag }}...${{ github.ref_name }}
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      run: |
        # Determine if this is a prerelease
        if [ "${{ steps.version.outputs.is-prerelease }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        # Create release with generated changelog
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes-file changelog.md \
          $PRERELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release with Docker image info
      run: |
        # Add container size and other metadata
        MANIFEST=$(docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }})
        SIZE=$(echo "$MANIFEST" | jq -r '.config.size // 0')
        SIZE_MB=$((SIZE / 1024 / 1024))
        
        echo "📦 **Container Details:**" >> release_update.md
        echo "- **Size:** ${SIZE_MB} MB" >> release_update.md
        echo "- **Platform:** linux/amd64" >> release_update.md
        echo "- **Registry:** GitHub Container Registry" >> release_update.md
        echo "" >> release_update.md
        echo "🔗 **Quick Links:**" >> release_update.md
        echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/badaiinasite)" >> release_update.md
        echo "- [Documentation](https://github.com/${{ github.repository }}#readme)" >> release_update.md
        echo "- [Issues](https://github.com/${{ github.repository }}/issues)" >> release_update.md
        
        # Append to existing release notes
        CURRENT_NOTES=$(gh release view ${{ github.ref_name }} --json body -q .body)
        echo "$CURRENT_NOTES" > combined_notes.md
        echo "" >> combined_notes.md
        cat release_update.md >> combined_notes.md
        
        gh release edit ${{ github.ref_name }} --notes-file combined_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-production:
    needs: build-and-release
    runs-on: ubuntu-latest
    # Deploy all releases (both stable and prereleases) since this is a personal app
    if: always() && needs.build-and-release.result == 'success'

    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo -e "Host ${{ secrets.DEPLOY_HOST }}\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

    - name: Connect to Tailscale Network
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:github-actions

    # Removed the problematic "Wait for Tailscale connection" step
    # The connection is established immediately after the GitHub Action completes

    - name: Deploy release to production
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "🚀 Deploying release ${{ needs.build-and-release.outputs.version }} to production..."
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Stop and remove existing container
          docker stop badaiinasite || true
          docker rm badaiinasite || true
          
          # Pull the specific release version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-release.outputs.version }}
          
          # Run new container with the specific version
          docker run -d \
            --name badaiinasite \
            --network ${{ secrets.NPM_DOCKER_NETWORK }} \
            --restart unless-stopped \
            -e OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
            -e LM_STUDIO_URL="http://${{ secrets.LM_STUDIO_ADDRESS }}:1234/v1/chat/completions" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-release.outputs.version }}
          
          # Clean up old images (keep last 3 versions)
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Tag}}\t{{.ID}}" | \
            grep -E "^v[0-9]" | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true
          
          # Show running containers
          docker ps
          
          echo "✅ Successfully deployed release ${{ needs.build-and-release.outputs.version }} at $(date)"
          echo "🏷️  Production is now running: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-release.outputs.version }}"
        EOF

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

    - name: Deployment success notification
      run: |
        echo "🎉 Successfully deployed release ${{ needs.build-and-release.outputs.version }} to production!"
        echo "🔗 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-and-release.outputs.version }}"