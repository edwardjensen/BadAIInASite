# .github/workflows/ci.yml
# Replaces deploy.yml - builds and tests but does NOT deploy
name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/badaiinasite

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      should-test: ${{ steps.changes.outputs.should-test }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for changes
      id: changes
      run: |
        # Always run basic CI checks (linting, basic tests, etc.)
        echo "should-test=true" >> $GITHUB_OUTPUT
        
        # Only build Docker image if app files changed
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
        elif git diff --name-only HEAD~1 HEAD | grep -E '^(src/|public/|package\.json|Dockerfile|settings\.conf|menu\.json)'; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "📦 App files changed - will build container"
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "📝 Only documentation/config changed - skipping container build"
        fi

  # Run basic CI checks on ALL changes
  lint-and-basic-tests:
    needs: check-changes
    runs-on: ubuntu-latest
    # Always run these checks, regardless of what files changed
    if: needs.check-changes.outputs.should-test == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run basic CI checks
      run: |
        echo "🔍 Running basic CI checks..."
        
        # 1. Check for common issues
        echo "📋 Checking for common issues..."
        
        # Check for TODO/FIXME comments (informational)
        if grep -r "TODO\|FIXME" src/ 2>/dev/null; then
          echo "ℹ️  Found TODO/FIXME comments (informational)"
        fi
        
        # Check for debugging code
        if grep -r "console\.log\|debugger\|print(" src/ 2>/dev/null; then
          echo "⚠️  Found debugging code - consider removing for production"
        fi
        
        # 2. File structure validation
        echo "📁 Validating file structure..."
        
        # Check for required files
        for file in "package.json" "Dockerfile" "README.md"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        # 3. Documentation checks
        echo "📚 Checking documentation..."
        
        # Validate README has basic sections
        if grep -q "## " README.md; then
          echo "✅ README.md has proper structure"
        else
          echo "⚠️  README.md could use better structure (add ## headers)"
        fi
        
        # 4. Configuration validation
        echo "⚙️  Validating configuration..."
        
        # Check package.json is valid JSON
        if command -v jq >/dev/null && jq empty package.json 2>/dev/null; then
          echo "✅ package.json is valid JSON"
        else
          echo "❌ package.json is invalid JSON"
          exit 1
        fi
        
        echo "✅ Basic CI checks completed"

  # Build and test container only when app files change
  container-build-and-test:
    needs: check-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    # Only run when app files changed
    if: needs.check-changes.outputs.should-build == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-dev
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          # Note: No 'latest' tag for development builds

    - name: Build and push development image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run tests
      run: |
        echo "🧪 Running comprehensive tests..."
        
        # Get the first built image tag
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # 1. Container Health Check
        echo "🏥 Testing container health..."
        CONTAINER_ID=$(docker run -d --name test-container $IMAGE_TAG)
        sleep 10  # Give container time to start
        
        # Check if container is running
        if docker ps | grep -q test-container; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # 2. Basic HTTP Response Test (if your app serves HTTP)
        echo "🌐 Testing HTTP response..."
        # Uncomment and modify for your app's actual port/endpoint:
        # if curl -f http://localhost:8080/health > /dev/null 2>&1; then
        #   echo "✅ HTTP health check passed"
        # else
        #   echo "❌ HTTP health check failed"
        #   exit 1
        # fi
        
        # 3. Environment Variable Tests
        echo "🔧 Testing environment handling..."
        docker exec test-container printenv | grep -E "(NODE_ENV|PORT)" || true
        
        # 4. Container Resource Usage
        echo "📊 Checking resource usage..."
        docker stats test-container --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        
        # 5. Security Scan (basic)
        echo "🔒 Running basic security checks..."
        # Check for common security issues
        if docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
           aquasec/trivy:latest image --severity HIGH,CRITICAL $IMAGE_TAG > /dev/null 2>&1; then
          echo "✅ No critical security vulnerabilities found"
        else
          echo "⚠️  Security scan completed (check logs for details)"
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
        echo "✅ All tests completed successfully"

  deployment-ready:
    needs: [check-changes, container-build-and-test]
    runs-on: ubuntu-latest
    if: |
      !cancelled() && 
      needs.check-changes.outputs.should-build == 'true' &&
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push'

    steps:
    - name: Deployment readiness
      run: |
        echo "🚀 Code is ready for deployment!"
        echo ""
        echo "📋 To deploy to production:"
        echo "   1. Create a release tag: git tag v1.0.0"
        echo "   2. Push the tag: git push origin v1.0.0" 
        echo "   3. The release workflow will build and deploy automatically"
        echo ""
        echo "💡 Development image available at:"
        echo "   ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-dev"

  # Summary job that always runs
  ci-summary:
    needs: [check-changes, lint-and-basic-tests, container-build-and-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "📊 CI Pipeline Summary"
        echo "====================="
        echo "Basic checks: ${{ needs.lint-and-basic-tests.result }}"
        echo "Container build: ${{ needs.container-build-and-test.result || 'skipped' }}"
        echo ""
        
        if [ "${{ needs.lint-and-basic-tests.result }}" = "success" ]; then
          if [ "${{ needs.check-changes.outputs.should-build }}" = "true" ]; then
            if [ "${{ needs.container-build-and-test.result }}" = "success" ]; then
              echo "✅ All CI checks passed - ready for release!"
            else
              echo "❌ Container build failed"
              exit 1
            fi
          else
            echo "✅ Documentation/config changes validated"
          fi
        else
          echo "❌ Basic CI checks failed"
          exit 1
        fi